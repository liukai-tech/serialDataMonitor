/*
 * variablesing.c
 *
 *  Created on: 30 janv. 2021
 *      Author: olivier
 */

#include "stdio.h"
#include "string.h"
#include "math.h"

#include "structures.h"
#include "monitoring.h"

#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"

#include "fsl_gpio.h"
#include "disk.h"

// Global variables and parameters for all the system
extern sGlobVarsPars_t GVP;

bool messagePending = false; 	// Used by cbTickvariablesing
extern char cmdLine[];			// Defined in serialIO_Host.c
extern uint8_t sendDataHost( char* message );	// Defined in serialIO_Host.c
extern void writeFPGA_NOP( void );
extern void writeFPGA_SetDitherFrequency( uint16_t value );
extern void writeFPGA_SetDitherAmplitude( float fValue );
extern void writeFPGA_EnableDisableChannels( void );
extern void writeFPGA_setPWMFrequency( uint16_t value );
extern void writeFPGA_setPWMDutyCycle( uint8_t channel, float dutyCycle );

static float dummy;

// mapping of ASCII characters to hex values
const uint8_t hashmap[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  !"#$%&'
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ()*+,-./
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // 01234567
  0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89:;<=>?
  0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // @ABCDEFG
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // HIJKLMNO
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // PQRSTUVW
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // XYZ[\]^_
  0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // `abcdefg
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // hijklmno
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pqrstuvw
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // xyz{|}~.
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // ........
};

typedef struct {
	void* data;
	eDataType_t type;
	bool report;
	void (*cb)(uint8_t);
} sVariables_t;

void onUpdateBoolsOut( uint8_t idx ) {
	GPIO_PinWrite( GPIO, ISO_VALV_2_3L_4L_OUT_GND, GVP.vars.boolsOut.isolValves3L4L );
	GPIO_PinWrite( GPIO, ISO_VALV_1_3R_4R_OUT_GND, GVP.vars.boolsOut.isolValves3R4R );
	GPIO_PinWrite( GPIO, WARNING_LIGHT_OUT_GND, GVP.vars.boolsOut.warningLight );
	GPIO_PinWrite( GPIO, SVDRV_ENABLE, GVP.vars.boolsOut.servoValvesEnable );
	GPIO_PinWrite( GPIO, SVDRV_SLEEP, GVP.vars.boolsOut.servoValvesSleep );
	GPIO_PinWrite( GPIO, SPARE_OUT_GND, GVP.vars.boolsOut.spareGND );
}

void onUpdatePWMDutyCycle( uint8_t idx ) {
	writeFPGA_setPWMDutyCycle(idx - 14, GVP.vars.valvesConsign[idx - 14]);
}

void onUpdateValvesPWMEnable( uint8_t idx ) {
	writeFPGA_EnableDisableChannels();
}

// Parameters updated to send to FPGA
void onUpdatePWMFrequency( uint8_t idx ) {
	// First round the value received to correspond exactly to
	// a LUT index
	uint16_t tmp = GVP.pars.valvesPWMFrequency /= 100;
	tmp *= 100;
	if (tmp > 25600)
		tmp = 25600;
	if (tmp<100)
		tmp=100;
	GVP.pars.valvesPWMFrequency = tmp;

	writeFPGA_setPWMFrequency( GVP.pars.valvesPWMFrequency );
}

void onUpdateDitherFrequency( uint8_t idx ) {
	// First round the value received to correspond exactly to
	// a LUT index
	uint16_t tmp = GVP.pars.valvesDitherFrequency /= 2;
	tmp *= 2;
	if (tmp > 504)
		tmp = 504;
	if (tmp<50)
		tmp=50;

	GVP.pars.valvesDitherFrequency = tmp;

	writeFPGA_SetDitherFrequency( GVP.pars.valvesDitherFrequency );
}

void onUpdateDitherAmplitude( uint8_t idx ) {

	// Test on value and (re)store
	if ( GVP.pars.valvesDitherAmplitude < 0.0f )
		GVP.pars.valvesDitherAmplitude = 0.0f;
	if ( GVP.pars.valvesDitherAmplitude > 100.0f )
		GVP.pars.valvesDitherAmplitude = 100.0f;

	writeFPGA_SetDitherAmplitude( GVP.pars.valvesDitherAmplitude );
}

sVariables_t variables[] = {
	// vars BOOLS
	{ (void *) &GVP.vars.boolsIn1,				eComDataType_U8, false, NULL },		// 0
	{ (void *) &GVP.vars.boolsIn2,				eComDataType_U8, false, NULL },
	{ (void *) &GVP.vars.boolsOut,				eComDataType_U8, false, onUpdateBoolsOut },
	{ (void *) &GVP.vars.valvesPWMEnable,		eComDataType_U8, false, onUpdateValvesPWMEnable },
	{ (void *) &GVP.vars.valvesDitherEnable,	eComDataType_U8,  false, NULL },
	{ (void *) &GVP.vars.pressureSensorsErrors,	eComDataType_U8,  false, NULL },	// 5

	{ (void *) &GVP.vars.wheelsSpeed[0],	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.wheelsSpeed[1],	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.wheelsSpeed[2],	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.wheelsSpeed[3],	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.wheelsSpeed[4],	eComDataType_Float, false, NULL },	// 10
	{ (void *) &GVP.vars.wheelsSpeed[5],	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.wheelsSpeed[6],	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.wheelsSpeed[7],	eComDataType_Float, false, NULL },

	{ (void *) &GVP.vars.valvesConsign[0],	eComDataType_Float, false, onUpdatePWMDutyCycle },  // 14 DON'T CHANGE THIS NUMBER, IT'S USED IN CALLBACK
	{ (void *) &GVP.vars.valvesConsign[1],	eComDataType_Float, false, onUpdatePWMDutyCycle },	// 15
	{ (void *) &GVP.vars.valvesConsign[2],	eComDataType_Float, false, onUpdatePWMDutyCycle },
	{ (void *) &GVP.vars.valvesConsign[3],	eComDataType_Float, false, onUpdatePWMDutyCycle },
	{ (void *) &GVP.vars.valvesConsign[4],	eComDataType_Float, false, onUpdatePWMDutyCycle },
	{ (void *) &GVP.vars.valvesConsign[5],	eComDataType_Float, false, onUpdatePWMDutyCycle },
	{ (void *) &GVP.vars.valvesConsign[6],	eComDataType_Float, false, onUpdatePWMDutyCycle },	// 20
	{ (void *) &GVP.vars.valvesConsign[7],	eComDataType_Float, false, onUpdatePWMDutyCycle },

	{ (void *) &GVP.vars.pressureSensors[0].value,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.pressureSensors[1].value,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.pressureSensors[2].value,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.pressureSensors[3].value,	eComDataType_Float, false, NULL },	// 25
	{ (void *) &GVP.vars.pressureSensors[4].value,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.pressureSensors[5].value,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.pressureSensors[6].value,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.vars.pressureSensors[7].value,	eComDataType_Float, false, NULL },

	{ (void *) &GVP.vars.brakeConsign.value,		eComDataType_Float, false, NULL },	// 30
	{ (void *) &GVP.vars.accelerometer.value,		eComDataType_Float, false, NULL },

	{ (void *) &dummy,	eComDataType_Float, false, NULL },
	{ (void *) &dummy,	eComDataType_Float, false, NULL },
	{ (void *) &dummy,	eComDataType_Float, false, NULL },
	{ (void *) &dummy,	eComDataType_Float, false, NULL },	// 35
	{ (void *) &dummy,	eComDataType_Float, false, NULL },
	{ (void *) &dummy,	eComDataType_Float, false, NULL },
	{ (void *) &dummy,	eComDataType_Float, false, NULL },
	{ (void *) &dummy,	eComDataType_Float, false, NULL },
	// pars
	{ (void *) &GVP.pars.PIDParams.dt,	eComDataType_Float, false, NULL },	// 40
	{ (void *) &GVP.pars.PIDParams.Kp,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.pars.PIDParams.Kd,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.pars.PIDParams.Ki,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.pars.PIDParams.prop_guard,	 eComDataType_Float, false, NULL },
	{ (void *) &GVP.pars.PIDParams.windup_guard, eComDataType_Float, false, NULL },	//45

	{ (void *) &GVP.pars.valvesPWMFrequency,	eComDataType_U16, false, onUpdatePWMFrequency },
	{ (void *) &GVP.pars.valvesDitherFrequency,	eComDataType_U16, false, onUpdateDitherFrequency },
	{ (void *) &GVP.pars.valvesDitherAmplitude,	eComDataType_Float, false, onUpdateDitherAmplitude },
	{ (void *) &GVP.pars.adcDispersion,			eComDataType_Float, false, NULL },

	{ (void *) &GVP.pars.brakeConsign.minValuePermitted,	eComDataType_Float, false, NULL },	// 50
	{ (void *) &GVP.pars.brakeConsign.maxValuePermitted,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.pars.accelerometer.minValuePermitted,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.pars.accelerometer.maxValuePermitted,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.pars.pressureSensor.minValuePermitted,	eComDataType_Float, false, NULL },
	{ (void *) &GVP.pars.pressureSensor.maxValuePermitted,	eComDataType_Float, false, NULL },	// 55
};

static const uint8_t SIZEvariables = sizeof( variables ) / sizeof( sVariables_t );

typedef struct {
	void (*cb)(void*);
	bool hasData;
	eDataType_t typeData;
} sCommands_t;

static void cmdSaveParamToFlash(void* pData)
{
	flash_erase_sector( BASE_PARAMS_ADDRESS );
	flash_write_buffer( BASE_PARAMS_ADDRESS, (uint8_t*)&GVP.pars, sizeof(GVP.pars) );
}

static void cmdSetReportingAllOff(void* pData) {

	for (uint32_t i=0; i<SIZEvariables; i++)
		variables[i].report = false;
}

sCommands_t commands[] = {
	{ cmdSaveParamToFlash, false },		// 0
	{ cmdSetReportingAllOff, false, },
};

static const uint8_t sizeCommands = sizeof( commands ) / sizeof( sCommands_t );

/*****************************************************************************
 * Private functions
 ****************************************************************************/
static void variablesSetReporting( char* dataRx, bool set ) {

	uint8_t varIdx = (uint8_t)(hashmap[(uint8_t)dataRx[1]] << 4) | hashmap[(uint8_t)dataRx[2]];
	uint8_t nbIndexes = (uint8_t)(hashmap[(uint8_t)dataRx[3]] << 4) | hashmap[(uint8_t)dataRx[4]];

	for (uint32_t i=varIdx; i<varIdx+nbIndexes; i++)
	if ( i < SIZEvariables )
		variables[i].report = set;
}

static void getValueFromHex(eDataType_t varType, void* value, char* dataRx) {

	uint8_t var1;
	uint8_t pVar2[2];
	uint8_t pVar4[4];

	switch ( varType ) {

		// mem: 4 bytes types
		case eComDataType_Float:
		case eComDataType_U32:
		case eComDataType_I32:
			// form of '?XXYWWWWWWWW\0' only
			if ( (dataRx[12] == '\0')) {
				pVar4[0] = (uint8_t)(hashmap[(uint8_t)dataRx[4]] << 4) | hashmap[(uint8_t)dataRx[5]];
				pVar4[1] = (uint8_t)(hashmap[(uint8_t)dataRx[6]] << 4) | hashmap[(uint8_t)dataRx[7]];
				pVar4[2] = (uint8_t)(hashmap[(uint8_t)dataRx[8]] << 4) | hashmap[(uint8_t)dataRx[9]];
				pVar4[3] = (uint8_t)(hashmap[(uint8_t)dataRx[10]] << 4) | hashmap[(uint8_t)dataRx[11]];
				// Store the variable
				memcpy( value, pVar4, 4 );
			}
			break;

		// mem: 2 bytes types
		case eComDataType_U16:
		case eComDataType_I16:
			// form of '?XXYWWWW\0' only
			if ( (dataRx[8] == '\0') ) {
				pVar2[0] = (uint8_t)(hashmap[(uint8_t)dataRx[4]] << 4) | hashmap[(uint8_t)dataRx[5]];
				pVar2[1] = (uint8_t)(hashmap[(uint8_t)dataRx[6]] << 4) | hashmap[(uint8_t)dataRx[7]];
				// Store the variable
				memcpy( value, pVar2, 2 );
			}
			break;

		// mem: 1 byte types A
		case eComDataType_U8:
		case eComDataType_I8:
			// form of '?XXYWW\0' only
			if ( (dataRx[6] == '\0') ) {
				var1 = (uint8_t)(hashmap[(uint8_t)dataRx[4]] << 4) | hashmap[(uint8_t)dataRx[5]];
				*((uint8_t *)value) = var1;
			}
			break;
	}
}

static void variablesSetVariable( char* dataRx ) {

	const uint8_t sizevariables = sizeof( variables ) / sizeof( sVariables_t );

	uint8_t varIdx;
	eDataType_t varType;

	varIdx = (uint8_t)(hashmap[(uint8_t)dataRx[1]] << 4) | hashmap[(uint8_t)dataRx[2]];

	if ( varIdx < sizevariables ) {

		varType = (eDataType_t)dataRx[3];

		// Value type to store must be the same as the data type
		if ( varType == variables[varIdx].type ) {
			//GetnStore
			getValueFromHex(varType, variables[varIdx].data, dataRx);
			//Call the cb if any
			if ( variables[varIdx].cb != NULL )
				variables[varIdx].cb(varIdx);
		}
	}
}

static void variablesSend( uint32_t index ) {

	char msgString[15];

	uint8_t var1;
	uint8_t pVar2[2];
	uint8_t pVar4[4];

	msgString[0] = reportValue;
	sprintf( &msgString[1], "%02X", index );
	msgString[3] = variables[index].type;

	switch ( variables[index].type ) {

		// mem: 4 bytes types
		case eComDataType_Float:
		case eComDataType_U32:
		case eComDataType_I32:
			memcpy( pVar4, variables[index].data, 4 );
			sprintf( &msgString[4], "%02X", pVar4[0] );
			sprintf( &msgString[6], "%02X", pVar4[1] );
			sprintf( &msgString[8], "%02X", pVar4[2] );
			sprintf( &msgString[10], "%02X", pVar4[3] );
			msgString[12] = '\n';
			msgString[13] = '\0';
			break;

		// mem: 2 bytes types
		case eComDataType_U16:
		case eComDataType_I16:
			memcpy( pVar2, variables[index].data, 2 );
			sprintf( &msgString[4], "%02X", pVar2[0] );
			sprintf( &msgString[6], "%02X", pVar2[1] );
			msgString[8] = '\n';
			msgString[9] = '\0';
			break;

		// mem: 1 byte types A
		case eComDataType_U8:
		case eComDataType_I8:
			var1 = *((uint8_t *)variables[index].data);
			sprintf( &msgString[4], "%02X", var1 );
			msgString[6] = '\n';
			msgString[7] = '\0';
			break;
	}

	// Send result
	sendDataHost( msgString );
}

/*
 * Seek and send from the variables struct for the next variable to report.
 * Each time this function is called, the index is set to the next variable
 * whose report bit is set to true and send it. When arrived at the end of struct, go
 * to the beginning as a loop.
 * Detect is no variables have their report bit to true (no endless loop)
 */
static void variablesSendNext( void ) {

	static uint32_t index = 0;
	static uint32_t lastIndex = 0;
	const uint8_t SIZEvariables = sizeof( variables ) / sizeof( sVariables_t );
	bool indexFound = false;

	// Find next index
	while ( true ) {

		if ( ++index == SIZEvariables )
			index = 0;

		if ( variables[index].report ) {
			indexFound = true;
			break;
		}

		if ( index == lastIndex )
			break;
	}

	if ( indexFound ) {
		lastIndex = index;
		variablesSend( index );
	}
}

/*****************************************************************************
 * Public function, called every tick timer
 ****************************************************************************/
/*
 * Report variables, if requested, every TICK
 * Interpret and execute command from host
 */
void timer0_CB(uint32_t flags) {

	uint8_t mem[4];
	uint32_t varIdx;
	eExecuteCMD_t cmdIdx;

	bool skipReport = false;

	// If a msg received, execute it
	if ( messagePending ) {

		messagePending = false;

		switch ( (eHostMonitoringCmd_t)cmdLine[0] ) {

			case reportValueOn:
				skipReport = false;
				variablesSetReporting( cmdLine, true );
				break;

			case reportValueOff:
				skipReport = false;
				variablesSetReporting( cmdLine, false );
				break;

			case reportValueOnce:
				skipReport = true;
				varIdx = (uint8_t)(hashmap[(uint8_t)cmdLine[1]] << 4) | hashmap[(uint8_t)cmdLine[2]] ;
				// Send directly the variable
				if ( varIdx < SIZEvariables )
					variablesSend( varIdx );
				break;

			case setValue:
				skipReport = false;
				variablesSetVariable( cmdLine );
				break;

			case executeCMD:
				cmdIdx = (uint8_t)(hashmap[(uint8_t)cmdLine[1]] << 4) | hashmap[(uint8_t)cmdLine[2]];
				if (cmdIdx < sizeCommands) {
					if (!commands[cmdIdx].hasData)
						//Call the function
						commands[cmdIdx].cb(NULL);
					else {
						// Value parameter must be the same as the data type
						if ( (eDataType_t)cmdLine[3] == commands[cmdIdx].typeData ) {
							//GetnStore the value
							getValueFromHex((eDataType_t)cmdLine[3], mem, cmdLine);
							//Call the function
							commands[cmdIdx].cb(mem);
						}
					}
				}
				break;

			default:
				skipReport = false;
				break;
		}
	}

	// Send next monitoring variable
	if ( !skipReport )
		variablesSendNext();
}

